package Ejercicio7;

import java.util.LinkedHashSet;
import java.util.Iterator;

/**
 * Sistema de gesti√≥n de cursos favoritos usando LinkedHashSet
 *
 * Esta clase demuestra las ventajas clave de LinkedHashSet:
 * 1. Mantiene el orden de inserci√≥n (como LinkedList)
 * 2. Evita elementos duplicados (como HashSet)
 * 3. Operaciones eficientes O(1) para agregar, remover y buscar
 */
public class PlataformaCursosFavoritos {

    // LinkedHashSet mantiene orden de inserci√≥n Y evita duplicados
    private LinkedHashSet<Curso> cursosFavoritos;
    private int contadorOperaciones;  // Para numererar las operaciones en la demo

    /**
     * Constructor: inicializa el sistema de favoritos
     */
    public PlataformaCursosFavoritos() {
        this.cursosFavoritos = new LinkedHashSet<>();
        this.contadorOperaciones = 0;

        System.out.println("üéì PLATAFORMA DE CURSOS FAVORITOS INICIALIZADA");
        System.out.println("Usando LinkedHashSet para mantener orden y evitar duplicados\n");
    }

    /**
     * Agrega un curso a favoritos, manteniendo orden y evitando duplicados
     * @param curso El curso a agregar a favoritos
     * @return true si se agreg√≥ exitosamente, false si ya exist√≠a
     */
    public boolean agregarAFavoritos(Curso curso) {
        contadorOperaciones++;
        System.out.println("üìå OPERACI√ìN " + contadorOperaciones + ": Agregando a favoritos");
        System.out.println("   Curso: " + curso);

        // LinkedHashSet.add() retorna false si el elemento ya existe
        boolean agregado = cursosFavoritos.add(curso);

        if (agregado) {
            System.out.println("   ‚úÖ AGREGADO - Nuevo favorito registrado");
        } else {
            System.out.println("   ‚ùå YA EXISTE - No se permiten duplicados");
            System.out.println("   üí° El orden original se mantiene intacto");
        }

        mostrarEstadoFavoritos();
        return agregado;
    }

    /**
     * Remueve un curso de favoritos
     * @param curso El curso a remover
     * @return true si se removi√≥ exitosamente, false si no exist√≠a
     */
    public boolean removerDeFavoritos(Curso curso) {
        contadorOperaciones++;
        System.out.println("üóëÔ∏è OPERACI√ìN " + contadorOperaciones + ": Removiendo de favoritos");
        System.out.println("   Curso: " + curso);

        boolean removido = cursosFavoritos.remove(curso);

        if (removido) {
            System.out.println("   ‚úÖ REMOVIDO - Ya no est√° en favoritos");
            System.out.println("   üí° El orden de los cursos restantes se preserva");
        } else {
            System.out.println("   ‚ùå NO ENCONTRADO - El curso no estaba en favoritos");
        }

        mostrarEstadoFavoritos();
        return removido;
    }

    /**
     * Verifica si un curso est√° en favoritos
     * @param curso El curso a verificar
     * @return true si est√° en favoritos, false si no
     */
    public boolean estaEnFavoritos(Curso curso) {
        return cursosFavoritos.contains(curso);
    }

    /**
     * Muestra el estado actual de los favoritos con orden preservado
     */
    private void mostrarEstadoFavoritos() {
        System.out.println("   üìä Estado actual de favoritos:");
        System.out.println("      Total de cursos: " + cursosFavoritos.size());

        if (cursosFavoritos.isEmpty()) {
            System.out.println("      Lista vac√≠a");
        } else {
            System.out.println("      Orden de marcaci√≥n (m√°s antiguo ‚Üí m√°s reciente):");

            int posicion = 1;
            // LinkedHashSet mantiene el orden de inserci√≥n en el iterador
            for (Curso curso : cursosFavoritos) {
                System.out.println("      " + posicion + ". " + curso);
                posicion++;
            }
        }
        System.out.println("   " + "‚îÄ".repeat(60) + "\n");
    }

    /**
     * Demuestra que el orden se mantiene incluso despu√©s de remociones
     */
    public void demostrarPreservacionDeOrden() {
        System.out.println("üß™ DEMOSTRACI√ìN ESPECIAL: Preservaci√≥n de orden tras remociones\n");

        // Crear cursos de prueba
        Curso cursoA = new Curso("WEB-201", "Desarrollo Web Avanzado", "Ana Garc√≠a", 40, "Web");
        Curso cursoB = new Curso("MOB-101", "Apps M√≥viles Android", "Luis Rodr√≠guez", 35, "M√≥vil");
        Curso cursoC = new Curso("DATA-301", "An√°lisis de Datos", "Mar√≠a L√≥pez", 50, "Data Science");
        Curso cursoD = new Curso("AI-401", "Inteligencia Artificial", "Dr. Chen", 60, "IA");

        // Agregar cursos en un orden espec√≠fico
        System.out.println("‚û°Ô∏è Agregando cursos en orden: A ‚Üí B ‚Üí C ‚Üí D");
        agregarAFavoritos(cursoA);
        agregarAFavoritos(cursoB);
        agregarAFavoritos(cursoC);
        agregarAFavoritos(cursoD);

        // Remover el curso del medio
        System.out.println("‚û°Ô∏è Removiendo curso B (del medio)");
        removerDeFavoritos(cursoB);

        // Agregar el curso B de nuevo
        System.out.println("‚û°Ô∏è Re-agregando curso B (deber√≠a ir al final)");
        agregarAFavoritos(cursoB);

        System.out.println("üéØ RESULTADO: A ‚Üí C ‚Üí D ‚Üí B (B se movi√≥ al final)");
        System.out.println("üí° LinkedHashSet mantiene el orden basado en cu√°ndo se insert√≥ cada elemento\n");
    }

    /**
     * Obtiene el n√∫mero total de cursos favoritos
     */
    public int getTotalFavoritos() {
        return cursosFavoritos.size();
    }

    /**
     * M√©todo principal - Demostraci√≥n completa del sistema
     */
    public static void main(String[] args) {
        // Crear instancia del sistema
        PlataformaCursosFavoritos plataforma = new PlataformaCursosFavoritos();

        // Crear cursos de ejemplo para las pruebas
        Curso java101 = new Curso("JAVA-101", "Fundamentos de Java", "Prof. Martinez", 30, "Programaci√≥n");
        Curso python201 = new Curso("PY-201", "Python Intermedio", "Dra. Silva", 25, "Programaci√≥n");
        Curso react301 = new Curso("REACT-301", "React Avanzado", "Ing. Torres", 40, "Frontend");
        Curso sql101 = new Curso("SQL-101", "Bases de Datos SQL", "Prof. Ram√≠rez", 20, "Bases de Datos");
        Curso git201 = new Curso("GIT-201", "Control de Versiones", "Dev. Morales", 15, "Herramientas");

        System.out.println("üß™ PRUEBA 1: Agregando cursos iniciales (orden de marcaci√≥n)");
        plataforma.agregarAFavoritos(java101);
        plataforma.agregarAFavoritos(python201);
        plataforma.agregarAFavoritos(react301);
        plataforma.agregarAFavoritos(sql101);

        System.out.println("üß™ PRUEBA 2: Intentos de duplicados (deben ser rechazados)");
        plataforma.agregarAFavoritos(java101);     // Duplicado
        plataforma.agregarAFavoritos(python201);   // Duplicado

        System.out.println("üß™ PRUEBA 3: Removiendo curso del medio");
        plataforma.removerDeFavoritos(python201);

        System.out.println("üß™ PRUEBA 4: Agregando nuevos cursos (van al final)");
        plataforma.agregarAFavoritos(git201);
        plataforma.agregarAFavoritos(python201);   // Re-agregar (va al final)

        System.out.println("üß™ PRUEBA 5: Verificaci√≥n de existencia");
        System.out.println("¬øJava101 en favoritos? " + plataforma.estaEnFavoritos(java101));
        System.out.println("¬øCurso inexistente en favoritos? " +
                plataforma.estaEnFavoritos(new Curso("XXX-999", "No Existe", "Nadie", 0, "Ninguna")));
        System.out.println();

        // Demostraci√≥n especial de preservaci√≥n de orden
        PlataformaCursosFavoritos demo = new PlataformaCursosFavoritos();
        demo.demostrarPreservacionDeOrden();

        // Resumen final
        System.out.println("=".repeat(70));
        System.out.println("üéØ RESUMEN DE VENTAJAS DE LinkedHashSet:");
        System.out.println("‚úÖ Mantiene el orden de inserci√≥n original");
        System.out.println("‚úÖ Evita duplicados autom√°ticamente");
        System.out.println("‚úÖ Operaciones eficientes O(1) para agregar/remover/buscar");
        System.out.println("‚úÖ Perfecto para listas de favoritos ordenadas y sin repetici√≥n");
        System.out.println("=".repeat(70));
    }
}
